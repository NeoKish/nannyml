#  Author:   Niels Nuyttens  <niels@nannyml.com>
#
#  License: Apache Software License 2.0
import re
from datetime import datetime
from pathlib import Path
from typing import Optional

from pptx import Presentation

from nannyml import ModelMetadata


def generate_report(output_directory: Path, metadata: ModelMetadata):
    date_string = datetime.now().strftime('%Y%m%d')
    prs = Presentation()

    # add title slide
    _add_title_slide(prs, model_name=metadata.name)

    # add drift stuff
    _add_section_title(prs, section_name="Univariate statistical drift", section_subtext='Drift calculation')

    for image_path in (output_directory / 'drift/univariate/statistical/images').iterdir():
        feature, metric = re.findall('statistical_drift-([\\w_]+)-([\\w_]+)', str(image_path))[0]
        _add_image_slide(prs, image_path, caption=f"{metric} for feature '{feature}'")

    prs.save(output_directory / f'{date_string}_nannyml_report.pptx')


def _add_title_slide(prs: Presentation, model_name: Optional[str]) -> Presentation:
    slide = prs.slides.add_slide(prs.slide_layouts[0])

    slide.shapes.title.text = f'Report: {model_name}' if model_name else 'NannyML report'
    slide.shapes[1].text = f"Generated by NannyML - {datetime.now().strftime('%Y/%m/%d %H:%M')}"


def _add_section_title(prs, section_name: str, section_subtext: str = None) -> Presentation:
    slide = prs.slides.add_slide(prs.slide_layouts[2])

    slide.shapes.title.text = section_name
    slide.shapes[1].text = section_subtext if section_subtext else ''


def _add_image_slide(prs, image_path: Path, caption: str = None) -> Presentation:
    slide = prs.slides.add_slide(prs.slide_layouts[8])
    for shape in slide.placeholders:
        print('%d %s' % (shape.placeholder_format.idx, shape.name))

    slide.placeholders[1].insert_picture(str(image_path))
    slide.placeholders[0].text = caption or ''
